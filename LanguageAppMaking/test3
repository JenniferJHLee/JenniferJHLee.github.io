#added Next button after each question

import tkinter as tk
import random

# Define the Korean sentences and their corresponding English translations
sentences = [
    ("오늘 날씨가 어때요?", "How's the weather today?", "What did you eat for lunch?"),
    ("지하철역이 어디에 있어요?", "Where is the subway station?", "Where can I buy a ticket?"),
    ("이 책은 얼마에요?", "How much is this book?", "What time does the store close?"),
    ("너무 피곤해요", "I'm very tired.", "I'm hungry.")
]

def generate_question():
    # Randomly select a sentence and its translations
    question_index = random.randint(0, len(sentences) - 1)
    question, correct_answer, wrong_answer = sentences[question_index]

    # Update the question and multiple-choice options
    korean_sentence.config(text=question)
    option1_button.config(text=correct_answer)
    option2_button.config(text=wrong_answer)

    # Store the correct answer index
    global correct_answer_index
    correct_answer_index = 0

def check_answer(answer_index):
    # Check if the selected answer is correct
    if answer_index == correct_answer_index:
        feedback_label.config(text="Correct!")
    else:
        feedback_label.config(text="Incorrect!")

    # Show the Next button
    next_button.pack()

def next_question():
    # Move to the next question
    generate_question()

    # Clear the feedback label and hide the Next button
    feedback_label.config(text="")
    next_button.pack_forget()

# Create the main window
window = tk.Tk()
window.title("Sentence Matching Game")

# Create the Korean sentence label
korean_sentence = tk.Label(window, text="", font=("Helvetica", 12, "bold"), pady=20)
korean_sentence.pack()

# Create the multiple-choice buttons
option1_button = tk.Button(window, text="", width=40, height=2, command=lambda: check_answer(0))
option1_button.pack(pady=10)

option2_button = tk.Button(window, text="", width=40, height=2, command=lambda: check_answer(1))
option2_button.pack(pady=10)

# Create a label for feedback
feedback_label = tk.Label(window, text="", pady=10)
feedback_label.pack()

# Create the Next button
next_button = tk.Button(window, text="Next", command=next_question)
next_button.pack()

# Generate the first question
generate_question()

# Hide the Next button initially
next_button.pack_forget()

# Start the main event loop
window.mainloop()

